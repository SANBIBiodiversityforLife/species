# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-02-24 11:21
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('biblio', '0001_initial'),
        ('people', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_migrant', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='CommonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveSmallIntegerField(default=0)),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='biblio.Reference')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, null=True)),
                ('distribution_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('residency_status', models.CharField(blank=True, choices=[('END', 'National endemic'), ('IND', 'Indigenous'), ('NAT', 'Native'), ('ALN', 'Alien/introduced'), ('INV', 'Invasive'), ('VAG', 'Vagrant'), ('NEN', 'Near endemic'), ('EXT', 'Extinct'), ('UNK', 'Unknown')], max_length=3, null=True)),
                ('level', models.CharField(blank=True, choices=[('C', 'Country'), ('P', 'Province'), ('D', 'District'), ('O', 'Other')], max_length=1, null=True)),
                ('description', models.TextField(blank=True)),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblio.Reference')),
            ],
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('morphology', models.TextField(blank=True)),
                ('diagnostics', models.TextField(blank=True)),
                ('trophic', models.TextField(blank=True)),
                ('habitat_narrative', models.TextField(blank=True)),
                ('altitude_or_depth_range', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('maturity_size_female', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('maturity_size_male', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('max_size', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('birth_size', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('size_units', models.CharField(blank=True, choices=[('CM', 'CM'), ('MM', 'MM'), ('M', 'M')], max_length=2, null=True)),
                ('generational_length', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('generational_length_narrative', models.TextField(blank=True)),
                ('maturity_age_female', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('maturity_age_male', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('longevity', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('reproductive_age', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('gestation_time', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('reproductive_periodicity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('average_fecundity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('natural_mortality', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('age_units', models.CharField(blank=True, choices=[('Y', 'Years'), ('M', 'Months'), ('D', 'Days'), ('H', 'Hours')], max_length=1, null=True)),
                ('reproduction', models.TextField(blank=True)),
                ('reproductive_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('O', 'Egg laying'), ('V', 'Live birth'), ('P', 'Parthenogenesis'), ('F', 'Free living larvae'), ('W', 'Water breeding')], max_length=1, null=True), blank=True, null=True, size=None)),
                ('movement', models.TextField(blank=True)),
                ('migration_patterns', models.CharField(blank=True, choices=[('FM', 'Full migrant'), ('AM', 'Altitudinal migrant'), ('NM', 'Not a migrant'), ('NO', 'Nomadic'), ('UN', 'Unknown')], max_length=2, null=True)),
                ('congregatory', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('CO', 'Congregatroy'), ('DI', 'Dispersive'), ('CY', 'Congregatory year round')], max_length=2, null=True), blank=True, null=True, size=None)),
                ('habitats', models.ManyToManyField(blank=True, help_text='<strong>Start typing to search through options.</strong> ', to='taxa.Habitat')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PointDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('date', models.DateField(blank=True, null=True)),
                ('origin_code', models.CharField(blank=True, max_length=100, null=True)),
                ('precision_m', models.IntegerField(blank=True, null=True)),
                ('qds', models.CharField(blank=True, max_length=8, null=True)),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='people.Person')),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('gbif_id', models.IntegerField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=200)),
                ('notes', models.TextField(null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('current_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxa.Taxon')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='taxa.Taxon')),
                ('rank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taxa.Rank')),
                ('references', models.ManyToManyField(through='taxa.Description', to='biblio.Reference')),
            ],
            options={
                'verbose_name_plural': 'taxa',
            },
        ),
        migrations.AddField(
            model_name='pointdistribution',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_distributions', to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='info',
            name='taxon',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info', to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='image',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='generaldistribution',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_distributions', to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='description',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='descriptions', to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxa.Language'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='biblio.Reference'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='taxon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='common_names', to='taxa.Taxon'),
        ),
        migrations.AlterUniqueTogether(
            name='taxon',
            unique_together=set([('name', 'parent', 'rank')]),
        ),
        migrations.AlterUniqueTogether(
            name='generaldistribution',
            unique_together=set([('taxon', 'distribution_polygon')]),
        ),
        migrations.AlterUniqueTogether(
            name='commonname',
            unique_together=set([('taxon', 'name', 'language')]),
        ),
    ]
