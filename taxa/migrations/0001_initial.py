# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-15 07:51
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('biblio', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_migrant', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='CommonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveSmallIntegerField(default=0)),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='biblio.Reference')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distribution_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('residency_status', models.CharField(choices=[('END', 'National endemic'), ('IND', 'Indigenous'), ('NAT', 'Native'), ('ALN', 'Alien/introduced'), ('INV', 'Invasive'), ('VAG', 'Vagrant'), ('NEN', 'Near endemic'), ('UNK', 'Unknown')], max_length=3)),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblio.Reference')),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('morphology', models.TextField()),
                ('identification', models.TextField()),
                ('behaviour', models.TextField()),
                ('distribution_description', models.TextField()),
                ('habitat_ecology', models.TextField()),
                ('altitude_or_depth_range', django.contrib.postgres.fields.ranges.IntegerRangeField()),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('gbif_id', models.IntegerField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('current_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxa.Taxon')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='taxa.Taxon')),
                ('rank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taxa.Rank')),
                ('references', models.ManyToManyField(through='taxa.Description', to='biblio.Reference')),
            ],
            options={
                'verbose_name_plural': 'taxa',
            },
        ),
        migrations.AddField(
            model_name='info',
            name='taxon',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='generaldistribution',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='description',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taxa.Taxon'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxa.Language'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='biblio.Reference'),
        ),
        migrations.AddField(
            model_name='commonname',
            name='taxon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='taxa.Taxon'),
        ),
        migrations.AlterUniqueTogether(
            name='generaldistribution',
            unique_together=set([('taxon', 'distribution_polygon')]),
        ),
        migrations.AlterUniqueTogether(
            name='commonname',
            unique_together=set([('taxon', 'name')]),
        ),
    ]
